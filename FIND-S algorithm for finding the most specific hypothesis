import pandas as pd

def find_s_algorithm(training_data, target_attribute):
    """
    Implement the FIND-S algorithm to find the most specific hypothesis
    
    Args:
    training_data: pandas DataFrame containing the training examples
    target_attribute: string name of the target attribute column
    
    Returns:
    A list representing the most specific hypothesis
    """
    # Separate positive and negative examples
    positive_examples = training_data[training_data[target_attribute] == 'Yes']
    
    # Initialize most specific hypothesis
    hypothesis = ['0'] * (len(training_data.columns) - 1)
    
    # Iterate through each positive example
    for idx, example in positive_examples.iterrows():
        attributes = example.drop(target_attribute).tolist()
        
        # Update hypothesis for the first positive example
        if hypothesis == ['0'] * (len(training_data.columns) - 1):
            hypothesis = attributes
        else:
            # Generalize the hypothesis for subsequent examples
            for i in range(len(hypothesis)):
                if hypothesis[i] != attributes[i]:
                    hypothesis[i] = '?'
    
    return hypothesis

def main():
    # Example training data (EnjoySport example from Tom Mitchell's book)
    data = {
        'Sky': ['Sunny', 'Sunny', 'Rainy', 'Sunny'],
        'AirTemp': ['Warm', 'Warm', 'Cold', 'Warm'],
        'Humidity': ['Normal', 'High', 'High', 'High'],
        'Wind': ['Strong', 'Strong', 'Strong', 'Strong'],
        'Water': ['Warm', 'Warm', 'Warm', 'Cool'],
        'Forecast': ['Same', 'Same', 'Change', 'Change'],
        'EnjoySport': ['Yes', 'Yes', 'No', 'Yes']
    }
    
    # Convert to DataFrame
    training_data = pd.DataFrame(data)
    print("Training Data:")
    print(training_data)
    print("\n")
    
    # Apply FIND-S algorithm
    target_attribute = 'EnjoySport'
    hypothesis = find_s_algorithm(training_data, target_attribute)
    
    # Display results
    print("Most Specific Hypothesis Found by FIND-S:")
    print(hypothesis)
    
    # Print in a more readable format
    print("\nHypothesis in readable form:")
    attributes = list(training_data.columns)
    attributes.remove(target_attribute)
    for attr, val in zip(attributes, hypothesis):
        print(f"{attr}: {val}")

if __name__ == "__main__":
    main()
